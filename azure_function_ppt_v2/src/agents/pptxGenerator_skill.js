const { BaseAgent } = require('./core/baseAgent');
const { PPTX_CONFIG } = require('../config/config');
const PptxGenJS = require('pptxgenjs');
const fs = require('fs');
const path = require('path');

/**
 * PptxGenerator Agent
 * Generates PowerPoint files using PptxGenJS based on structured content
 * NOTE: This is a placeholder - PptxGenJS integration to be completed in separate session
 */
class PptxGenerator extends BaseAgent {
    constructor() {
        super('PptxGenerator');
    }

    async process(input) {
        this.validateInput(input, ['structured_content', 'session_id']);

        const { structured_content, slide_estimate, session_id } = input;

        try {
            console.log('[PptxGenerator] Starting PowerPoint generation...');
            console.log(`[PptxGenerator] Processing ${structured_content.total_slides} slides`);

            // Use actual PptxGenJS implementation
            const result = await this.generateWithPptxGenJS(structured_content, session_id);

            console.log('[PptxGenerator] PowerPoint generation completed');
            return result;

        } catch (error) {
            console.error('[PptxGenerator] Generation failed:', error);
            throw new Error(`PowerPoint generation failed: ${error.message}`);
        }
    }

    /**
     * Placeholder method for PowerPoint generation
     * TODO: Replace with actual PptxGenJS implementation
     */
    async generatePowerPointPlaceholder(structuredContent, sessionId) {
        // Simulate processing time
        await new Promise(resolve => setTimeout(resolve, 2000));

        // Generate filename
        const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
        const filename = `presentation_${sessionId}_${timestamp}.pptx`;

        // Create placeholder base64 (empty presentation)
        // TODO: Replace with actual PptxGenJS generated content
        const placeholderBase64 = this.createPlaceholderPowerPoint();

        return {
            ppt_data: placeholderBase64,
            filename: filename,
            file_size_kb: Math.round(placeholderBase64.length / 1024),
            slide_count: structuredContent.total_slides,
            generation_method: 'placeholder',
            message: 'Placeholder PowerPoint generated - PptxGenJS integration pending'
        };
    }

    /**
     * Create a minimal placeholder PowerPoint in base64 format
     * TODO: Replace with actual PptxGenJS generation
     */
    createPlaceholderPowerPoint() {
        // This is a minimal base64 representation
        // In actual implementation, this will be generated by PptxGenJS
        return 'UEsDBBQAAAAIAA0AAABQAAAAAAAAAAEAAAABAAAAW0NvbnRlbnRfVHlwZXNdLnhtbA==';
    }

    /**
     * Generate PowerPoint using PptxGenJS with comprehensive layout support
     */
    async generateWithPptxGenJS(structuredContent, sessionId) {
        try {
            // Initialize PptxGenJS
            const pres = new PptxGenJS();
            
            // Configure 16:9 widescreen presentation
            pres.defineLayout({ 
                name: 'LAYOUT_16x9', 
                width: 10, 
                height: 5.625 
            });
            pres.layout = 'LAYOUT_16x9';

            // Set presentation properties
            pres.author = 'Document Generation System v2';
            pres.company = 'NCS';
            pres.subject = 'Generated Presentation';
            pres.title = structuredContent.presentation_title || 'Generated Presentation';

            // Define master slides based on company template
            this.defineCompanyMasterSlides(pres);

            console.log(`[PptxGenerator] Creating ${structuredContent.total_slides} slides`);

            // Generate all slides based on structured content
            for (let i = 0; i < structuredContent.slides.length; i++) {
                const slideData = structuredContent.slides[i];
                console.log(`[PptxGenerator] Creating slide ${i + 1}: ${slideData.layout}`);
                
                await this.createSlideWithMasterSlides(pres, slideData, i + 1);
            }

            // Generate filename
            const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
            const filename = `presentation_${sessionId}_${timestamp}.pptx`;

            // Generate base64 output
            console.log('[PptxGenerator] Generating PowerPoint file...');
            const base64Data = await pres.write('base64');

            // Save locally for testing (only in development)
            await this.saveLocalCopy(pres, filename);

            return {
                ppt_data: base64Data,
                filename: filename,
                file_size_kb: Math.round(base64Data.length / 1024),
                slide_count: structuredContent.total_slides,
                generation_method: 'pptxgenjs',
                message: 'PowerPoint presentation generated successfully with PptxGenJS'
            };

        } catch (error) {
            console.error('[PptxGenerator] PptxGenJS generation failed:', error);
            throw new Error(`PptxGenJS generation failed: ${error.message}`);
        }
    }

    /**
     * Define company master slides based on template structure
     */
    defineCompanyMasterSlides(pres) {
        console.log('[PptxGenerator] Defining NCS company master slides');

        // Title Master Slide
        pres.defineSlideMaster({
            title: "NCS_TITLE_MASTER",
            background: { color: "FFFFFF" },
            margin: [0.75, 0.5, 0.75, 0.5],
            objects: [
                // Company branding line
                { 
                    line: { 
                        x: 0.5, y: 5.4, w: 9, h: 0,
                        line: { color: "0066CC", width: 3 }
                    }
                },
                // Title placeholder
                { 
                    placeholder: {
                        options: { 
                            name: "title", 
                            type: "title",
                            x: 1, y: 2, w: 8, h: 1.5
                        }
                    }
                },
                // Subtitle placeholder
                { 
                    placeholder: {
                        options: { 
                            name: "subtitle", 
                            type: "body",
                            x: 1, y: 3.5, w: 8, h: 1
                        }
                    }
                }
            ],
            slideNumber: { x: 9.2, y: 5.2, color: "666666", fontSize: 10 }
        });

        // Content Master Slide
        pres.defineSlideMaster({
            title: "NCS_CONTENT_MASTER",
            background: { color: "FFFFFF" },
            margin: [0.75, 0.5, 0.75, 0.5],
            objects: [
                // Company branding line
                { 
                    line: { 
                        x: 0.5, y: 5.4, w: 9, h: 0,
                        line: { color: "0066CC", width: 2 }
                    }
                },
                // Company logo text
                { 
                    text: { 
                        text: "NCS", 
                        options: { 
                            x: 8.5, y: 0.2, w: 1.2, h: 0.4,
                            fontSize: 12, color: "0066CC", bold: true, align: "right"
                        }
                    }
                },
                // Title placeholder
                { 
                    placeholder: {
                        options: { 
                            name: "title", 
                            type: "title",
                            x: 1, y: 0.7, w: 8, h: 0.8
                        }
                    }
                },
                // Body placeholder
                { 
                    placeholder: {
                        options: { 
                            name: "body", 
                            type: "body",
                            x: 1.5, y: 1.7, w: 7, h: 3.5
                        }
                    }
                }
            ],
            slideNumber: { x: 9.2, y: 5.2, color: "666666", fontSize: 10 }
        });

        // Two Column Master Slide
        pres.defineSlideMaster({
            title: "NCS_TWO_COLUMN_MASTER",
            background: { color: "FFFFFF" },
            margin: [0.75, 0.5, 0.75, 0.5],
            objects: [
                // Company branding line
                { 
                    line: { 
                        x: 0.5, y: 5.4, w: 9, h: 0,
                        line: { color: "0066CC", width: 2 }
                    }
                },
                // Company logo text
                { 
                    text: { 
                        text: "NCS", 
                        options: { 
                            x: 8.5, y: 0.2, w: 1.2, h: 0.4,
                            fontSize: 12, color: "0066CC", bold: true, align: "right"
                        }
                    }
                },
                // Title placeholder
                { 
                    placeholder: {
                        options: { 
                            name: "title", 
                            type: "title",
                            x: 1, y: 0.7, w: 8, h: 0.8
                        }
                    }
                },
                // Left column placeholder
                { 
                    placeholder: {
                        options: { 
                            name: "left_content", 
                            type: "body",
                            x: 1, y: 1.7, w: 3.8, h: 3.5
                        }
                    }
                },
                // Right column placeholder
                { 
                    placeholder: {
                        options: { 
                            name: "right_content", 
                            type: "body",
                            x: 5.2, y: 1.7, w: 3.8, h: 3.5
                        }
                    }
                }
            ],
            slideNumber: { x: 9.2, y: 5.2, color: "666666", fontSize: 10 }
        });

        // Thank You Master Slide
        pres.defineSlideMaster({
            title: "NCS_THANK_YOU_MASTER",
            background: { color: "FFFFFF" },
            margin: [0.75, 0.5, 0.75, 0.5],
            objects: [
                // Company branding line
                { 
                    line: { 
                        x: 0.5, y: 5.4, w: 9, h: 0,
                        line: { color: "0066CC", width: 2 }
                    }
                },
                // Thank you text
                { 
                    text: { 
                        text: "Thank You", 
                        options: { 
                            x: 1, y: 2, w: 8, h: 1.5,
                            fontSize: 48, color: "0066CC", bold: true, align: "center"
                        }
                    }
                },
                // Content placeholder
                { 
                    placeholder: {
                        options: { 
                            name: "body", 
                            type: "body",
                            x: 1.5, y: 3.7, w: 7, h: 1.5
                        }
                    }
                }
            ],
            slideNumber: { x: 9.2, y: 5.2, color: "666666", fontSize: 10 }
        });
    }

    /**
     * Create slides using defined master slides
     */
    createSlideWithMasterSlides(pres, slideData, slideNumber) {
        // Map slide types to master slide names
        const masterSlideMap = {
            'TITLE_SLIDE': 'NCS_TITLE_MASTER',
            'AGENDA_SLIDE': 'NCS_CONTENT_MASTER',
            'CONTENT_SLIDE': 'NCS_CONTENT_MASTER',
            'OVERVIEW_SLIDE': 'NCS_CONTENT_MASTER',
            'TABLE_SLIDE': 'NCS_CONTENT_MASTER',
            'TWO_COLUMN_SLIDE': 'NCS_TWO_COLUMN_MASTER',
            'TEXT_BOX_SLIDE': 'NCS_CONTENT_MASTER',
            'SUMMARY_SLIDE': 'NCS_CONTENT_MASTER',
            'THANK_YOU_SLIDE': 'NCS_THANK_YOU_MASTER'
        };

        const masterName = masterSlideMap[slideData.layout] || 'NCS_CONTENT_MASTER';
        
        try {
            // Add slide using master slide
            const slide = pres.addSlide({ masterName: masterName });
            
            // Populate placeholders with content
            this.populateMasterSlidePlaceholders(slide, slideData, slideNumber);
            
        } catch (error) {
            console.warn(`[PptxGenerator] Failed to use master slide ${masterName}: ${error.message}`);
            // Fallback to manual slide creation
            this.createSlideWithPptxGenJS(pres, slideData, slideNumber);
        }
    }

    /**
     * Populate master slide placeholders with content
     */
    populateMasterSlidePlaceholders(slide, slideData, slideNumber) {
        // Populate title placeholder
        if (slideData.title) {
            slide.addText(slideData.title, { 
                placeholder: 'title',
                fontSize: slideData.layout === 'TITLE_SLIDE' ? 36 : 24,
                color: '0066CC',
                bold: true,
                align: slideData.layout === 'TITLE_SLIDE' ? 'center' : 'left'
            });
        }

        // Populate content based on slide type
        switch (slideData.layout) {
            case 'TITLE_SLIDE':
                this.populateTitleMasterSlide(slide, slideData);
                break;
                
            case 'TWO_COLUMN_SLIDE':
                this.populateTwoColumnMasterSlide(slide, slideData);
                break;
                
            case 'TABLE_SLIDE':
                this.populateTableMasterSlide(slide, slideData);
                break;
                
            default:
                this.populateContentMasterSlide(slide, slideData);
        }
    }

    /**
     * Populate title master slide
     */
    populateTitleMasterSlide(slide, slideData) {
        const bullets = this.extractBullets(slideData);
        if (bullets && bullets.length > 0) {
            const subtitleText = bullets.join(' • ');
            slide.addText(subtitleText, { 
                placeholder: 'subtitle',
                fontSize: 18,
                color: '333333',
                align: 'center'
            });
        }
    }

    /**
     * Populate content master slide
     */
    populateContentMasterSlide(slide, slideData) {
        const bullets = this.extractBullets(slideData);
        if (bullets && bullets.length > 0) {
            const bulletTextArray = bullets.map(item => ({
                text: item,
                options: { bullet: true, fontSize: 16, color: '333333' }
            }));
            
            slide.addText(bulletTextArray, { 
                placeholder: 'body',
                lineSpacingMultiple: 1.5,
                valign: 'top'
            });
        }
    }

    /**
     * Populate two-column master slide
     */
    populateTwoColumnMasterSlide(slide, slideData) {
        const columnData = this.extractColumnData(slideData);
        
        // Left column
        if (columnData.left && columnData.left.length > 0) {
            const leftTextArray = columnData.left.map(item => ({
                text: item,
                options: { bullet: true, fontSize: 14, color: '333333' }
            }));
            
            slide.addText(leftTextArray, { 
                placeholder: 'left_content',
                lineSpacingMultiple: 1.4,
                valign: 'top'
            });
        }

        // Right column
        if (columnData.right && columnData.right.length > 0) {
            const rightTextArray = columnData.right.map(item => ({
                text: item,
                options: { bullet: true, fontSize: 14, color: '333333' }
            }));
            
            slide.addText(rightTextArray, { 
                placeholder: 'right_content',
                lineSpacingMultiple: 1.4,
                valign: 'top'
            });
        }
    }

    /**
     * Populate table master slide
     */
    populateTableMasterSlide(slide, slideData) {
        const tableData = this.extractTableData(slideData);
        if (tableData && tableData.length > 0) {
            slide.addTable(tableData, { 
                placeholder: 'body',
                fontSize: 14,
                color: '333333',
                border: { type: 'solid', color: '0066CC', pt: 1 },
                fill: { color: 'F0F7FF' },
                align: 'left',
                valign: 'middle'
            });
        }
    }

    /**
     * Create slides with PptxGenJS based on layout type and content (fallback method)
     */
    createSlideWithPptxGenJS(pres, slideData, slideNumber) {
        const slide = pres.addSlide();
        
        // Apply background and theme
        slide.background = { color: 'FFFFFF' };

        switch (slideData.layout) {
            case 'TITLE_SLIDE':
                this.createTitleSlide(slide, slideData);
                break;
                
            case 'AGENDA_SLIDE':
                this.createAgendaSlide(slide, slideData);
                break;
                
            case 'CONTENT_SLIDE':
            case 'OVERVIEW_SLIDE':
                this.createContentSlide(slide, slideData);
                break;
                
            case 'TABLE_SLIDE':
                this.createTableSlide(slide, slideData);
                break;
                
            case 'TWO_COLUMN_SLIDE':
                this.createTwoColumnSlide(slide, slideData);
                break;
                
            case 'TEXT_BOX_SLIDE':
                this.createTextBoxSlide(slide, slideData);
                break;
                
            case 'SUMMARY_SLIDE':
                this.createSummarySlide(slide, slideData);
                break;
                
            case 'THANK_YOU_SLIDE':
                this.createThankYouSlide(slide, slideData);
                break;
                
            default:
                // Default to content slide
                this.createContentSlide(slide, slideData);
        }
        
        // Add slide number
        if (slideNumber > 1) {
            slide.addText(`${slideNumber}`, {
                x: 9.2, y: 5.2, w: 0.5, h: 0.3,
                fontSize: 10,
                color: '666666',
                align: 'right'
            });
        }
    }

    /**
     * Create title slide layout
     */
    createTitleSlide(slide, slideData) {
        // Main title
        slide.addText(slideData.title, {
            x: 1, y: 1.5, w: 8, h: 1.5,
            fontSize: 36,
            color: '2E3D49',
            bold: true,
            align: 'center'
        });

        // Subtitle if provided
        if (slideData.subtitle) {
            slide.addText(slideData.subtitle, {
                x: 1, y: 3, w: 8, h: 1,
                fontSize: 20,
                color: '666666',
                align: 'center'
            });
        }

        // Date and author
        const currentDate = new Date().toLocaleDateString();
        slide.addText(`${currentDate}`, {
            x: 1, y: 4.5, w: 8, h: 0.5,
            fontSize: 14,
            color: '888888',
            align: 'center'
        });
    }

    /**
     * Create agenda slide layout
     */
    createAgendaSlide(slide, slideData) {
        // Title
        slide.addText(slideData.title, {
            x: 1, y: 0.5, w: 8, h: 0.8,
            fontSize: 28,
            color: '2E3D49',
            bold: true
        });

        // Agenda items as bullet points
        const bullets = this.extractBullets(slideData);
        if (bullets && bullets.length > 0) {
            const bulletTextArray = bullets.map(item => ({
                text: item,
                options: { bullet: true, fontSize: 18, color: '333333' }
            }));
            
            slide.addText(bulletTextArray, {
                x: 1.5, y: 1.5, w: 7, h: 3.5,
                valign: 'top',
                lineSpacingMultiple: 1.3
            });
        }
    }

    /**
     * Create content slide with bullet points
     */
    createContentSlide(slide, slideData) {
        // Title
        slide.addText(slideData.title, {
            x: 1, y: 0.5, w: 8, h: 0.8,
            fontSize: 24,
            color: '2E3D49',
            bold: true
        });

        // Content as bullet points
        const bullets = this.extractBullets(slideData);
        if (bullets && bullets.length > 0) {
            const bulletTextArray = bullets.map(item => ({
                text: item,
                options: { bullet: true, fontSize: 16, color: '333333' }
            }));
            
            slide.addText(bulletTextArray, {
                x: 1.5, y: 1.5, w: 7, h: 3.5,
                valign: 'top',
                lineSpacingMultiple: 1.4
            });
        }
    }

    /**
     * Create table slide layout
     */
    createTableSlide(slide, slideData) {
        // Title
        slide.addText(slideData.title, {
            x: 1, y: 0.5, w: 8, h: 0.8,
            fontSize: 24,
            color: '2E3D49',
            bold: true
        });

        // Table content
        const tableData = this.extractTableData(slideData);
        if (tableData && tableData.length > 0) {
            slide.addTable(tableData, {
                x: 1, y: 1.5, w: 8, h: 3,
                fontSize: 14,
                color: '333333',
                border: { type: 'solid', color: 'CCCCCC', pt: 1 },
                fill: { color: 'F8F9FA' },
                align: 'left',
                valign: 'middle'
            });
        }
    }

    /**
     * Create two-column slide layout
     */
    createTwoColumnSlide(slide, slideData) {
        // Title
        slide.addText(slideData.title, {
            x: 1, y: 0.5, w: 8, h: 0.8,
            fontSize: 24,
            color: '2E3D49',
            bold: true
        });

        // Extract column data
        const columnData = this.extractColumnData(slideData);
        
        // Left column
        if (columnData.left && columnData.left.length > 0) {
            const leftTextArray = columnData.left.map(item => ({
                text: item,
                options: { bullet: true, fontSize: 14, color: '333333' }
            }));
            
            slide.addText(leftTextArray, {
                x: 1, y: 1.5, w: 3.8, h: 3.5,
                valign: 'top',
                lineSpacingMultiple: 1.3
            });
        }

        // Right column
        if (columnData.right && columnData.right.length > 0) {
            const rightTextArray = columnData.right.map(item => ({
                text: item,
                options: { bullet: true, fontSize: 14, color: '333333' }
            }));
            
            slide.addText(rightTextArray, {
                x: 5.2, y: 1.5, w: 3.8, h: 3.5,
                valign: 'top',
                lineSpacingMultiple: 1.3
            });
        }
    }

    /**
     * Create text box slide layout for flexible positioning
     */
    createTextBoxSlide(slide, slideData) {
        // Title
        slide.addText(slideData.title, {
            x: 1, y: 0.5, w: 8, h: 0.8,
            fontSize: 24,
            color: '2E3D49',
            bold: true
        });

        // Text boxes with flexible positioning
        if (slideData.text_boxes && slideData.text_boxes.length > 0) {
            slideData.text_boxes.forEach((textBox, index) => {
                slide.addText(textBox.content, {
                    x: textBox.x || 1 + (index % 2) * 4,
                    y: textBox.y || 1.5 + Math.floor(index / 2) * 1.5,
                    w: textBox.w || 3.5,
                    h: textBox.h || 1,
                    fontSize: textBox.fontSize || 14,
                    color: textBox.color || '333333',
                    align: textBox.align || 'left',
                    valign: textBox.valign || 'top'
                });
            });
        }
    }

    /**
     * Create summary slide layout
     */
    createSummarySlide(slide, slideData) {
        // Title
        slide.addText(slideData.title, {
            x: 1, y: 0.5, w: 8, h: 0.8,
            fontSize: 28,
            color: '2E3D49',
            bold: true
        });

        // Key takeaways
        const bullets = this.extractBullets(slideData);
        if (bullets && bullets.length > 0) {
            const takeawaysTextArray = bullets.map((item, index) => ({
                text: `${index + 1}. ${item}`,
                options: { fontSize: 16, color: '333333' }
            }));
            
            slide.addText(takeawaysTextArray, {
                x: 1.5, y: 1.5, w: 7, h: 3.5,
                valign: 'top',
                lineSpacingMultiple: 1.4
            });
        }
    }

    /**
     * Create thank you slide layout
     */
    createThankYouSlide(slide, slideData) {
        // Thank you message
        slide.addText('Thank You', {
            x: 1, y: 2, w: 8, h: 1.5,
            fontSize: 48,
            color: '2E3D49',
            bold: true,
            align: 'center'
        });

        // Additional content from bullets
        const bullets = this.extractBullets(slideData);
        if (bullets && bullets.length > 0) {
            const bulletTextArray = bullets.map(item => ({
                text: item,
                options: { bullet: true, fontSize: 14, color: '666666' }
            }));
            
            slide.addText(bulletTextArray, {
                x: 1.5, y: 3.5, w: 7, h: 1.5,
                valign: 'top',
                lineSpacingMultiple: 1.2
            });
        }
    }

    /**
     * Extract bullets from slide data based on content structure
     */
    extractBullets(slideData) {
        if (!slideData.content) return [];

        // Handle different content structures
        if (slideData.content.bullets && Array.isArray(slideData.content.bullets)) {
            return slideData.content.bullets;
        }
        
        // Fallback for direct content array
        if (Array.isArray(slideData.content)) {
            return slideData.content;
        }
        
        return [];
    }

    /**
     * Extract table data from slide data
     */
    extractTableData(slideData) {
        if (!slideData.content || !slideData.content.table) return [];

        const table = slideData.content.table;
        const tableRows = [];

        // Add headers if present
        if (table.headers && Array.isArray(table.headers)) {
            tableRows.push(table.headers);
        }

        // Add data rows
        if (table.rows && Array.isArray(table.rows)) {
            tableRows.push(...table.rows);
        }

        return tableRows;
    }

    /**
     * Extract column data for two-column slides
     */
    extractColumnData(slideData) {
        if (!slideData.content || !slideData.content.columns) {
            return { left: [], right: [] };
        }

        const columns = slideData.content.columns;
        return {
            left: Array.isArray(columns.left) ? columns.left : [],
            right: Array.isArray(columns.right) ? columns.right : []
        };
    }

    /**
     * Save a local copy of the PowerPoint file for testing
     */
    async saveLocalCopy(pres, filename) {
        try {
            // Only save locally in development mode
            if (process.env.NODE_ENV === 'production' || process.env.WEBSITE_SITE_NAME) {
                return; // Skip in Azure production
            }

            // Create local_output directory if it doesn't exist
            const outputDir = path.join(__dirname, '../../local_output');
            if (!fs.existsSync(outputDir)) {
                fs.mkdirSync(outputDir, { recursive: true });
                console.log('[PptxGenerator] Created local_output directory');
            }

            // Save the PowerPoint file locally
            const localPath = path.join(outputDir, filename);
            await pres.writeFile({ fileName: localPath });
            
            console.log(`[PptxGenerator] PowerPoint saved locally: ${localPath}`);

        } catch (error) {
            console.warn('[PptxGenerator] Failed to save local copy:', error.message);
            // Don't throw error - local save is optional
        }
    }
}

module.exports = { PptxGenerator };