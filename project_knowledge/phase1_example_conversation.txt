Example postman calls at our Phase 1 project, consist of my first and second request.
You only need to focus on "user_message", "status","session_id","entra_id", "status", "conversation_history", "pipeline_info"(optional depends on the complexity of our project)


First Request
Request Body:
{
    "user_message": "Create an agent that explains any technology's historical context and evolution. Input: Any technology name or concept in string. Output: Concise essay on historical background, key developments, cultural impact, and current relevance. They should both just be text/string",
    "entra_id": "af57localtest-yy"
}

Response Body:
{
    "conversation_data": {
        "status": "completed",
        "session_id": "PCSH18072025DA74E6A245",
        "entra_id": "af57localtest-yy",
        "conversation_history": [
            {
                "role": "user",
                "content": "Create an agent that explains any technology's historical context and evolution. Input: Any technology name or concept in string. Output: Concise essay on historical background, key developments, cultural impact, and current relevance. They should both just be text/string"
            },
            {
                "role": "assistant",
                "content": "AGENT_NAME: Technology Context Essay Generator\n\nSUMMARY:  \nDelivers concise, well-structured essays that explain the historical context, evolution, and cultural impact of any technology or concept. Designed for educators, content creators, and learners, this agent transforms a simple topic input into an informative essay tailored to user preferences for length, detail, tone, and format. It ensures clarity, factual accuracy, and relevance, making complex technological histories accessible and engaging.\n\n• **Input**: Technology name or concept (string), with optional configuration for length, detail level, formality, and output format  \n• **Processing**: Validates input, determines focus, generates key points, and composes an essay with introduction, main content, and conclusion  \n• **Output**: JSON object containing the essay (in plain text, markdown, or HTML) and metadata (word count, timestamp, configuration used)  \n• **Special Features**: Customizable essay parameters, ambiguity handling, structured formatting, and metadata for integration and traceability\n\n• **Ideal for**: Educational platforms, content creators, and learners seeking clear explanations of technological topics  \n• **Also useful for**: Knowledge bases, documentation teams, and anyone needing concise, reliable technology overviews  \n\n---FORMATTED_CONTENT---\n\n# Technological Essay Generation Agent\n\n## 1. Purpose\n\nGenerates concise, informative, and well-structured essays on specified technological topics. Suitable for integration into educational, informational, or content creation platforms.\n\n## 2. Input Specification\n\n- **topic** (`string`): The main subject for the essay (e.g., \"AI in healthcare\").\n- **configuration** (`object`, optional): Customization parameters:\n  - `length` (`enum`: \"short\", \"medium\", \"long\"; default: \"medium\"): Desired essay length.\n  - `detail_level` (`enum`: \"basic\", \"intermediate\", \"advanced\"; default: \"intermediate\"): Depth of technical detail.\n  - `formality` (`enum`: \"informal\", \"neutral\", \"formal\"; default: \"neutral\"): Tone of the essay.\n  - `output_format` (`enum`: \"plain_text\", \"markdown\", \"html\"; default: \"plain_text\"): Output format.\n\n### Input Validation Rules\n\n- **topic**:\n  - Required; must be a non-empty string.\n  - Character limit: 10–120 characters.\n  - Language: English only.\n  - Must not contain prohibited or unsafe terms.\n- **configuration**:\n  - Each parameter must match allowed enum values.\n  - If omitted, defaults are applied.\n\n## 3. Output Specification\n\n- **essay** (`string`): Generated essay content in the specified output format.\n- **metadata** (`object`):\n  - `word_count` (`integer`): Number of words in the essay.\n  - `generation_timestamp` (`ISO 8601 string`): UTC timestamp of essay generation.\n  - `configuration_used` (`object`): Effective configuration parameters applied.\n\n### Output Structure\n\nOutput is a JSON object containing `essay` and `metadata`.\n\n- **essay** content is formatted according to `output_format`:\n  - `\"plain_text\"`: Unformatted text.\n  - `\"markdown\"`: Markdown-formatted text (headings, lists, emphasis).\n  - `\"html\"`: HTML-formatted content (paragraphs, headings, lists).\n\n## 4. Processing Logic\n\n1. Validate input parameters against specified rules.\n2. Normalize and sanitize the topic string.\n3. If the topic is ambiguous or multi-topic (e.g., \"AI and robotics\"), prompt clarification or select a primary focus using context or user preference.\n4. Retrieve or generate key points, subtopics, and supporting details relevant to the topic and configuration.\n5. Compose essay sections: introduction, main content, and conclusion, ensuring logical flow and adherence to configuration parameters.\n6. Format the essay according to the specified `output_format`.\n7. Package the essay and metadata into the output JSON structure.\n\n## 5. Quality Criteria\n\n- Factual accuracy and relevance to the specified topic.\n- Clarity, coherence, and logical structure.\n- Adherence to configuration parameters (length, detail, formality, format).\n- Proper formatting and output structure.\n- No inclusion of prohibited or unsafe content.\n\n## 6. Error Handling\n\n- **Invalid input**: Returns a structured error object with code, message, and remediation steps.\n- **Ambiguous or multi-topic input**: Returns a clarification request or selects the most relevant topic based on context.\n- **Internal errors**: Returns a generic error message and logs the incident for review.\n\n## 7. Security & Data Privacy\n\n- Input sanitization to prevent injection attacks.\n- Logging excludes sensitive user data.\n- Compliance with relevant data privacy regulations (e.g., GDPR).\n- Secure transmission (HTTPS required).\n\n---END_FORMATTED_CONTENT---",
                "agent_name": "SKFormatterAgent"
            }
        ],
        "pipeline_info": [
            "SKInputValidatorSkill",
            "SKResearchSkill",
            "SKEvaluatorSkill",
            "SKSolutionConsultantSkill",
            "SKFormatterAgent"
        ],
        "quality_summary": "{\"total_evaluations\": 1, \"final_score\": 99, \"threshold_value\": 80, \"evaluation_rounds\": [{\"iteration\": 1, \"score\": 99, \"quality_level\": \"Excellent 95\", \"threshold_met\": true}]}",
        "post_completion_refinement": "false",
        "refinement_type": "",
        "specification_updated": "false",
        "usable_outputs": {
            "generated_agent_name": "Technology Context Essay Generator",
            "generated_summary": "Delivers concise, well-structured essays that explain the historical context, evolution, and cultural impact of any technology or concept. Designed for educators, content creators, and learners, this agent transforms a simple topic input into an informative essay tailored to user preferences for length, detail, tone, and format. It ensures clarity, factual accuracy, and relevance, making complex technological histories accessible and engaging.\n• **Input**: Technology name or concept (string), with optional configuration for length, detail level, formality, and output format\n• **Processing**: Validates input, determines focus, generates key points, and composes an essay with introduction, main content, and conclusion\n• **Output**: JSON object containing the essay (in plain text, markdown, or HTML) and metadata (word count, timestamp, configuration used)\n• **Special Features**: Customizable essay parameters, ambiguity handling, structured formatting, and metadata for integration and traceability\n• **Ideal for**: Educational platforms, content creators, and learners seeking clear explanations of technological topics\n• **Also useful for**: Knowledge bases, documentation teams, and anyone needing concise, reliable technology overviews",
            "generated_markdown": "# Technological Essay Generation Agent\n\n## 1. Purpose\n\nGenerates concise, informative, and well-structured essays on specified technological topics. Suitable for integration into educational, informational, or content creation platforms.\n\n## 2. Input Specification\n\n- **topic** (`string`): The main subject for the essay (e.g., \"AI in healthcare\").\n- **configuration** (`object`, optional): Customization parameters:\n  - `length` (`enum`: \"short\", \"medium\", \"long\"; default: \"medium\"): Desired essay length.\n  - `detail_level` (`enum`: \"basic\", \"intermediate\", \"advanced\"; default: \"intermediate\"): Depth of technical detail.\n  - `formality` (`enum`: \"informal\", \"neutral\", \"formal\"; default: \"neutral\"): Tone of the essay.\n  - `output_format` (`enum`: \"plain_text\", \"markdown\", \"html\"; default: \"plain_text\"): Output format.\n\n### Input Validation Rules\n\n- **topic**:\n  - Required; must be a non-empty string.\n  - Character limit: 10–120 characters.\n  - Language: English only.\n  - Must not contain prohibited or unsafe terms.\n- **configuration**:\n  - Each parameter must match allowed enum values.\n  - If omitted, defaults are applied.\n\n## 3. Output Specification\n\n- **essay** (`string`): Generated essay content in the specified output format.\n- **metadata** (`object`):\n  - `word_count` (`integer`): Number of words in the essay.\n  - `generation_timestamp` (`ISO 8601 string`): UTC timestamp of essay generation.\n  - `configuration_used` (`object`): Effective configuration parameters applied.\n\n### Output Structure\n\nOutput is a JSON object containing `essay` and `metadata`.\n\n- **essay** content is formatted according to `output_format`:\n  - `\"plain_text\"`: Unformatted text.\n  - `\"markdown\"`: Markdown-formatted text (headings, lists, emphasis).\n  - `\"html\"`: HTML-formatted content (paragraphs, headings, lists).\n\n## 4. Processing Logic\n\n1. Validate input parameters against specified rules.\n2. Normalize and sanitize the topic string.\n3. If the topic is ambiguous or multi-topic (e.g., \"AI and robotics\"), prompt clarification or select a primary focus using context or user preference.\n4. Retrieve or generate key points, subtopics, and supporting details relevant to the topic and configuration.\n5. Compose essay sections: introduction, main content, and conclusion, ensuring logical flow and adherence to configuration parameters.\n6. Format the essay according to the specified `output_format`.\n7. Package the essay and metadata into the output JSON structure.\n\n## 5. Quality Criteria\n\n- Factual accuracy and relevance to the specified topic.\n- Clarity, coherence, and logical structure.\n- Adherence to configuration parameters (length, detail, formality, format).\n- Proper formatting and output structure.\n- No inclusion of prohibited or unsafe content.\n\n## 6. Error Handling\n\n- **Invalid input**: Returns a structured error object with code, message, and remediation steps.\n- **Ambiguous or multi-topic input**: Returns a clarification request or selects the most relevant topic based on context.\n- **Internal errors**: Returns a generic error message and logs the incident for review.\n\n## 7. Security & Data Privacy\n\n- Input sanitization to prevent injection attacks.\n- Logging excludes sensitive user data.\n- Compliance with relevant data privacy regulations (e.g., GDPR).\n- Secure transmission (HTTPS required)."
        }
    },
    "power_automate_response": { **Ignore this section as Power Automate Flow and Dataverse is not implemented yet**
    }
}

Second Request
Request Body:
{
    "user_message": "output in pdf too",
    "session_id": "PCSH18072025DA74E6A245",
    "entra_id": "af57localtest-yy",
    "conversation_history": [
        {
            "role": "user",
            "content": "Create an agent that explains any technology's historical context and evolution. Input: Any technology name or concept in string. Output: Concise essay on historical background, key developments, cultural impact, and current relevance. They should both just be text/string"
        },
        {
            "role": "assistant",
            "content": "AGENT_NAME: Technology Context Essay Generator\n\nSUMMARY:  \nDelivers concise, well-structured essays that explain the historical context, evolution, and cultural impact of any technology or concept. Designed for educators, content creators, and learners, this agent transforms a simple topic input into an informative essay tailored to user preferences for length, detail, tone, and format. It ensures clarity, factual accuracy, and relevance, making complex technological histories accessible and engaging.\n\n• **Input**: Technology name or concept (string), with optional configuration for length, detail level, formality, and output format  \n• **Processing**: Validates input, determines focus, generates key points, and composes an essay with introduction, main content, and conclusion  \n• **Output**: JSON object containing the essay (in plain text, markdown, or HTML) and metadata (word count, timestamp, configuration used)  \n• **Special Features**: Customizable essay parameters, ambiguity handling, structured formatting, and metadata for integration and traceability\n\n• **Ideal for**: Educational platforms, content creators, and learners seeking clear explanations of technological topics  \n• **Also useful for**: Knowledge bases, documentation teams, and anyone needing concise, reliable technology overviews  \n\n---FORMATTED_CONTENT---\n\n# Technological Essay Generation Agent\n\n## 1. Purpose\n\nGenerates concise, informative, and well-structured essays on specified technological topics. Suitable for integration into educational, informational, or content creation platforms.\n\n## 2. Input Specification\n\n- **topic** (`string`): The main subject for the essay (e.g., \"AI in healthcare\").\n- **configuration** (`object`, optional): Customization parameters:\n  - `length` (`enum`: \"short\", \"medium\", \"long\"; default: \"medium\"): Desired essay length.\n  - `detail_level` (`enum`: \"basic\", \"intermediate\", \"advanced\"; default: \"intermediate\"): Depth of technical detail.\n  - `formality` (`enum`: \"informal\", \"neutral\", \"formal\"; default: \"neutral\"): Tone of the essay.\n  - `output_format` (`enum`: \"plain_text\", \"markdown\", \"html\"; default: \"plain_text\"): Output format.\n\n### Input Validation Rules\n\n- **topic**:\n  - Required; must be a non-empty string.\n  - Character limit: 10–120 characters.\n  - Language: English only.\n  - Must not contain prohibited or unsafe terms.\n- **configuration**:\n  - Each parameter must match allowed enum values.\n  - If omitted, defaults are applied.\n\n## 3. Output Specification\n\n- **essay** (`string`): Generated essay content in the specified output format.\n- **metadata** (`object`):\n  - `word_count` (`integer`): Number of words in the essay.\n  - `generation_timestamp` (`ISO 8601 string`): UTC timestamp of essay generation.\n  - `configuration_used` (`object`): Effective configuration parameters applied.\n\n### Output Structure\n\nOutput is a JSON object containing `essay` and `metadata`.\n\n- **essay** content is formatted according to `output_format`:\n  - `\"plain_text\"`: Unformatted text.\n  - `\"markdown\"`: Markdown-formatted text (headings, lists, emphasis).\n  - `\"html\"`: HTML-formatted content (paragraphs, headings, lists).\n\n## 4. Processing Logic\n\n1. Validate input parameters against specified rules.\n2. Normalize and sanitize the topic string.\n3. If the topic is ambiguous or multi-topic (e.g., \"AI and robotics\"), prompt clarification or select a primary focus using context or user preference.\n4. Retrieve or generate key points, subtopics, and supporting details relevant to the topic and configuration.\n5. Compose essay sections: introduction, main content, and conclusion, ensuring logical flow and adherence to configuration parameters.\n6. Format the essay according to the specified `output_format`.\n7. Package the essay and metadata into the output JSON structure.\n\n## 5. Quality Criteria\n\n- Factual accuracy and relevance to the specified topic.\n- Clarity, coherence, and logical structure.\n- Adherence to configuration parameters (length, detail, formality, format).\n- Proper formatting and output structure.\n- No inclusion of prohibited or unsafe content.\n\n## 6. Error Handling\n\n- **Invalid input**: Returns a structured error object with code, message, and remediation steps.\n- **Ambiguous or multi-topic input**: Returns a clarification request or selects the most relevant topic based on context.\n- **Internal errors**: Returns a generic error message and logs the incident for review.\n\n## 7. Security & Data Privacy\n\n- Input sanitization to prevent injection attacks.\n- Logging excludes sensitive user data.\n- Compliance with relevant data privacy regulations (e.g., GDPR).\n- Secure transmission (HTTPS required).\n\n---END_FORMATTED_CONTENT---",
            "agent_name": "SKFormatterAgent"
        }
    ]
}

Response Body:
{
    "conversation_data": {
        "status": "completed",
        "session_id": "PCSH18072025DA74E6A245",
        "entra_id": "af57localtest-yy",
        "conversation_history": [
            {
                "role": "user",
                "content": "Create an agent that explains any technology's historical context and evolution. Input: Any technology name or concept in string. Output: Concise essay on historical background, key developments, cultural impact, and current relevance. They should both just be text/string"
            },
            {
                "role": "assistant",
                "content": "AGENT_NAME: Technology Context Essay Generator\n\nSUMMARY:  \nDelivers concise, well-structured essays that explain the historical context, evolution, and cultural impact of any technology or concept. Designed for educators, content creators, and learners, this agent transforms a simple topic input into an informative essay tailored to user preferences for length, detail, tone, and format. It ensures clarity, factual accuracy, and relevance, making complex technological histories accessible and engaging.\n\n• **Input**: Technology name or concept (string), with optional configuration for length, detail level, formality, and output format  \n• **Processing**: Validates input, determines focus, generates key points, and composes an essay with introduction, main content, and conclusion  \n• **Output**: JSON object containing the essay (in plain text, markdown, or HTML) and metadata (word count, timestamp, configuration used)  \n• **Special Features**: Customizable essay parameters, ambiguity handling, structured formatting, and metadata for integration and traceability\n\n• **Ideal for**: Educational platforms, content creators, and learners seeking clear explanations of technological topics  \n• **Also useful for**: Knowledge bases, documentation teams, and anyone needing concise, reliable technology overviews  \n\n---FORMATTED_CONTENT---\n\n# Technological Essay Generation Agent\n\n## 1. Purpose\n\nGenerates concise, informative, and well-structured essays on specified technological topics. Suitable for integration into educational, informational, or content creation platforms.\n\n## 2. Input Specification\n\n- **topic** (`string`): The main subject for the essay (e.g., \"AI in healthcare\").\n- **configuration** (`object`, optional): Customization parameters:\n  - `length` (`enum`: \"short\", \"medium\", \"long\"; default: \"medium\"): Desired essay length.\n  - `detail_level` (`enum`: \"basic\", \"intermediate\", \"advanced\"; default: \"intermediate\"): Depth of technical detail.\n  - `formality` (`enum`: \"informal\", \"neutral\", \"formal\"; default: \"neutral\"): Tone of the essay.\n  - `output_format` (`enum`: \"plain_text\", \"markdown\", \"html\"; default: \"plain_text\"): Output format.\n\n### Input Validation Rules\n\n- **topic**:\n  - Required; must be a non-empty string.\n  - Character limit: 10–120 characters.\n  - Language: English only.\n  - Must not contain prohibited or unsafe terms.\n- **configuration**:\n  - Each parameter must match allowed enum values.\n  - If omitted, defaults are applied.\n\n## 3. Output Specification\n\n- **essay** (`string`): Generated essay content in the specified output format.\n- **metadata** (`object`):\n  - `word_count` (`integer`): Number of words in the essay.\n  - `generation_timestamp` (`ISO 8601 string`): UTC timestamp of essay generation.\n  - `configuration_used` (`object`): Effective configuration parameters applied.\n\n### Output Structure\n\nOutput is a JSON object containing `essay` and `metadata`.\n\n- **essay** content is formatted according to `output_format`:\n  - `\"plain_text\"`: Unformatted text.\n  - `\"markdown\"`: Markdown-formatted text (headings, lists, emphasis).\n  - `\"html\"`: HTML-formatted content (paragraphs, headings, lists).\n\n## 4. Processing Logic\n\n1. Validate input parameters against specified rules.\n2. Normalize and sanitize the topic string.\n3. If the topic is ambiguous or multi-topic (e.g., \"AI and robotics\"), prompt clarification or select a primary focus using context or user preference.\n4. Retrieve or generate key points, subtopics, and supporting details relevant to the topic and configuration.\n5. Compose essay sections: introduction, main content, and conclusion, ensuring logical flow and adherence to configuration parameters.\n6. Format the essay according to the specified `output_format`.\n7. Package the essay and metadata into the output JSON structure.\n\n## 5. Quality Criteria\n\n- Factual accuracy and relevance to the specified topic.\n- Clarity, coherence, and logical structure.\n- Adherence to configuration parameters (length, detail, formality, format).\n- Proper formatting and output structure.\n- No inclusion of prohibited or unsafe content.\n\n## 6. Error Handling\n\n- **Invalid input**: Returns a structured error object with code, message, and remediation steps.\n- **Ambiguous or multi-topic input**: Returns a clarification request or selects the most relevant topic based on context.\n- **Internal errors**: Returns a generic error message and logs the incident for review.\n\n## 7. Security & Data Privacy\n\n- Input sanitization to prevent injection attacks.\n- Logging excludes sensitive user data.\n- Compliance with relevant data privacy regulations (e.g., GDPR).\n- Secure transmission (HTTPS required).\n\n---END_FORMATTED_CONTENT---",
                "agent_name": "SKFormatterAgent"
            },
            {
                "role": "user",
                "content": "output in pdf too"
            },
            {
                "role": "assistant",
                "content": "AGENT_NAME: Technology Context Essay Generator\n\nSUMMARY:  \nDelivers concise, well-structured essays that explain the historical context, evolution, and cultural impact of any technology or concept. Designed for educators, content creators, and learners, this agent transforms a simple topic input into an informative essay tailored to user preferences for length, detail, tone, and format. It ensures clarity, factual accuracy, and relevance, making complex technological histories accessible and engaging.\n\n• **Input**: Technology name or concept (string), with optional configuration for length, detail level, formality, and output format  \n• **Processing**: Validates input, determines focus, generates key points, and composes an essay with introduction, main content, and conclusion  \n• **Output**: JSON object containing the essay (in plain text, markdown, HTML, or PDF) and metadata (word count, timestamp, configuration used)  \n• **Special Features**: Customizable essay parameters, ambiguity handling, structured formatting, and metadata for integration and traceability\n\n• **Ideal for**: Educational platforms, content creators, and learners seeking clear explanations of technological topics  \n• **Also useful for**: Knowledge bases, documentation teams, and anyone needing concise, reliable technology overviews  \n\n---FORMATTED_CONTENT---\n\n# Technological Essay Generation Agent\n\n## 1. Purpose\n\nGenerates concise, informative, and well-structured essays on specified technological topics. Suitable for integration into educational, informational, or content creation platforms.\n\n## 2. Input Specification\n\n- **topic** (`string`): The main subject for the essay (e.g., \"AI in healthcare\").\n- **configuration** (`object`, optional): Customization parameters:\n  - `length` (`enum`: \"short\", \"medium\", \"long\"; default: \"medium\"): Desired essay length.\n  - `detail_level` (`enum`: \"basic\", \"intermediate\", \"advanced\"; default: \"intermediate\"): Depth of technical detail.\n  - `formality` (`enum`: \"informal\", \"neutral\", \"formal\"; default: \"neutral\"): Tone of the essay.\n  - `output_format` (`enum`: \"plain_text\", \"markdown\", \"html\", \"pdf\"; default: \"plain_text\"): Output format.\n\n### Input Validation Rules\n\n- **topic**:\n  - Required; must be a non-empty string.\n  - Character limit: 10–120 characters.\n  - Language: English only.\n  - Must not contain prohibited or unsafe terms.\n- **configuration**:\n  - Each parameter must match allowed enum values.\n  - If omitted, defaults are applied.\n\n## 3. Output Specification\n\n- **essay** (`string`): Generated essay content in the specified output format.\n- **metadata** (`object`):\n  - `word_count` (`integer`): Number of words in the essay.\n  - `generation_timestamp` (`ISO 8601 string`): UTC timestamp of essay generation.\n  - `configuration_used` (`object`): Effective configuration parameters applied.\n\n### Output Structure\n\nOutput is a JSON object containing `essay` and `metadata`.\n\n- **essay** content is formatted according to `output_format`:\n  - `\"plain_text\"`: Unformatted text.\n  - `\"markdown\"`: Markdown-formatted text (headings, lists, emphasis).\n  - `\"html\"`: HTML-formatted content (paragraphs, headings, lists).\n  - `\"pdf\"`: Essay content rendered as a PDF document (encoded as a base64 string in the JSON output).\n\n## 4. Processing Logic\n\n1. Validate input parameters against specified rules.\n2. Normalize and sanitize the topic string.\n3. If the topic is ambiguous or multi-topic (e.g., \"AI and robotics\"), prompt clarification or select a primary focus using context or user preference.\n4. Retrieve or generate key points, subtopics, and supporting details relevant to the topic and configuration.\n5. Compose essay sections: introduction, main content, and conclusion, ensuring logical flow and adherence to configuration parameters.\n6. Format the essay according to the specified `output_format`.\n7. Package the essay and metadata into the output JSON structure.\n\n## 5. Quality Criteria\n\n- Factual accuracy and relevance to the specified topic.\n- Clarity, coherence, and logical structure.\n- Adherence to configuration parameters (length, detail, formality, format).\n- Proper formatting and output structure.\n- No inclusion of prohibited or unsafe content.\n\n## 6. Error Handling\n\n- **Invalid input**: Returns a structured error object with code, message, and remediation steps.\n- **Ambiguous or multi-topic input**: Returns a clarification request or selects the most relevant topic based on context.\n- **Internal errors**: Returns a generic error message and logs the incident for review.\n\n## 7. Security & Data Privacy\n\n- Input sanitization to prevent injection attacks.\n- Logging excludes sensitive user data.\n- Compliance with relevant data privacy regulations (e.g., GDPR).\n- Secure transmission (HTTPS required).\n\n---END_FORMATTED_CONTENT---",
                "agent_name": "SKFormatterAgent"
            }
        ],
        "pipeline_info": [
            "SKInputValidatorSkill",
            "SKResearchSkill",
            "SKEvaluatorSkill",
            "SKSolutionConsultantSkill",
            "SKFormatterAgent",
            "post_completion_update"
        ],
        "quality_summary": "",
        "post_completion_refinement": "false",
        "refinement_type": "post_completion_update",
        "specification_updated": "false",
        "usable_outputs": {
            "generated_agent_name": "Technology Context Essay Generator",
            "generated_summary": "Delivers concise, well-structured essays that explain the historical context, evolution, and cultural impact of any technology or concept. Designed for educators, content creators, and learners, this agent transforms a simple topic input into an informative essay tailored to user preferences for length, detail, tone, and format. It ensures clarity, factual accuracy, and relevance, making complex technological histories accessible and engaging.\n• **Input**: Technology name or concept (string), with optional configuration for length, detail level, formality, and output format\n• **Processing**: Validates input, determines focus, generates key points, and composes an essay with introduction, main content, and conclusion\n• **Output**: JSON object containing the essay (in plain text, markdown, HTML, or PDF) and metadata (word count, timestamp, configuration used)\n• **Special Features**: Customizable essay parameters, ambiguity handling, structured formatting, and metadata for integration and traceability\n• **Ideal for**: Educational platforms, content creators, and learners seeking clear explanations of technological topics\n• **Also useful for**: Knowledge bases, documentation teams, and anyone needing concise, reliable technology overviews",
            "generated_markdown": "# Technological Essay Generation Agent\n\n## 1. Purpose\n\nGenerates concise, informative, and well-structured essays on specified technological topics. Suitable for integration into educational, informational, or content creation platforms.\n\n## 2. Input Specification\n\n- **topic** (`string`): The main subject for the essay (e.g., \"AI in healthcare\").\n- **configuration** (`object`, optional): Customization parameters:\n  - `length` (`enum`: \"short\", \"medium\", \"long\"; default: \"medium\"): Desired essay length.\n  - `detail_level` (`enum`: \"basic\", \"intermediate\", \"advanced\"; default: \"intermediate\"): Depth of technical detail.\n  - `formality` (`enum`: \"informal\", \"neutral\", \"formal\"; default: \"neutral\"): Tone of the essay.\n  - `output_format` (`enum`: \"plain_text\", \"markdown\", \"html\", \"pdf\"; default: \"plain_text\"): Output format.\n\n### Input Validation Rules\n\n- **topic**:\n  - Required; must be a non-empty string.\n  - Character limit: 10–120 characters.\n  - Language: English only.\n  - Must not contain prohibited or unsafe terms.\n- **configuration**:\n  - Each parameter must match allowed enum values.\n  - If omitted, defaults are applied.\n\n## 3. Output Specification\n\n- **essay** (`string`): Generated essay content in the specified output format.\n- **metadata** (`object`):\n  - `word_count` (`integer`): Number of words in the essay.\n  - `generation_timestamp` (`ISO 8601 string`): UTC timestamp of essay generation.\n  - `configuration_used` (`object`): Effective configuration parameters applied.\n\n### Output Structure\n\nOutput is a JSON object containing `essay` and `metadata`.\n\n- **essay** content is formatted according to `output_format`:\n  - `\"plain_text\"`: Unformatted text.\n  - `\"markdown\"`: Markdown-formatted text (headings, lists, emphasis).\n  - `\"html\"`: HTML-formatted content (paragraphs, headings, lists).\n  - `\"pdf\"`: Essay content rendered as a PDF document (encoded as a base64 string in the JSON output).\n\n## 4. Processing Logic\n\n1. Validate input parameters against specified rules.\n2. Normalize and sanitize the topic string.\n3. If the topic is ambiguous or multi-topic (e.g., \"AI and robotics\"), prompt clarification or select a primary focus using context or user preference.\n4. Retrieve or generate key points, subtopics, and supporting details relevant to the topic and configuration.\n5. Compose essay sections: introduction, main content, and conclusion, ensuring logical flow and adherence to configuration parameters.\n6. Format the essay according to the specified `output_format`.\n7. Package the essay and metadata into the output JSON structure.\n\n## 5. Quality Criteria\n\n- Factual accuracy and relevance to the specified topic.\n- Clarity, coherence, and logical structure.\n- Adherence to configuration parameters (length, detail, formality, format).\n- Proper formatting and output structure.\n- No inclusion of prohibited or unsafe content.\n\n## 6. Error Handling\n\n- **Invalid input**: Returns a structured error object with code, message, and remediation steps.\n- **Ambiguous or multi-topic input**: Returns a clarification request or selects the most relevant topic based on context.\n- **Internal errors**: Returns a generic error message and logs the incident for review.\n\n## 7. Security & Data Privacy\n\n- Input sanitization to prevent injection attacks.\n- Logging excludes sensitive user data.\n- Compliance with relevant data privacy regulations (e.g., GDPR).\n- Secure transmission (HTTPS required)."
        }
    },
    "power_automate_response": { **Ignore this section as Power Automate Flow and Dataverse is not implemented yet**
    }
}